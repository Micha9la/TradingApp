@page "/trade-wizard/{direction:int}"

@inject NavigationManager Navigation
@using TradingApp.BlazorUI.Services
@inject ITradeService TradeService

<h3>Create Trade - @direction</h3>

@if (IsFinished)
{
    <h3>✅ Trade saved successfully!</h3>
    <a href="/trades" class="btn btn-primary">Go to Trades</a>
    <NavLink href="/trades" class="btn btn-primary">Go to Trades</NavLink>
}
else
{
    <div class="wizard-step">
        @if (CurrentStep == 0)
        {
            <label>Company Name</label>
            <InputText @bind-Value="CurrentTrade.Company.CompanyName"
                       placeholder="Type or select company..."
                       @oninput="e => FilterSuggestions(e, nameof(CurrentTrade.Company.CompanyName))" />

            @if (FilteredSuggestions?.Any() == true && ActiveField == nameof(CurrentTrade.Company.CompanyName))
            {
                <ul class="suggestions">
                    @foreach (var suggestion in FilteredSuggestions)
                    {
                        <li @onclick="() => SelectSuggestion(suggestion, nameof(CurrentTrade.Company.CompanyName))">@suggestion</li>
                    }
                </ul>
            }
        }
        else if (CurrentStep == 1)
        {
            <label>Contact Person</label>
            <InputText @bind-Value="CurrentTrade.Company.ContactPerson"
                       placeholder="Type or select contact person..."
                       @oninput="e => FilterSuggestions(e, nameof(CurrentTrade.Company.ContactPerson))" />

            @if (FilteredSuggestions?.Any() == true && ActiveField == nameof(CurrentTrade.Company.ContactPerson))
            {
                <ul class="suggestions">
                    @foreach (var suggestion in FilteredSuggestions)
                    {
                        <li @onclick="() => SelectSuggestion(suggestion, nameof(CurrentTrade.Company.ContactPerson))">@suggestion</li>
                    }
                </ul>
            }
        }
        else if (CurrentStep == 2)
        {
            <label>Product Name</label>
            <InputText @bind-Value="CurrentTrade.Product.ProductName"
                       placeholder="Type or select product..."
                       @oninput="e => FilterSuggestions(e, nameof(CurrentTrade.Product.ProductName))" />

            @if (FilteredSuggestions?.Any() == true && ActiveField == nameof(CurrentTrade.Product.ProductName))
            {
                <ul class="suggestions">
                    @foreach (var suggestion in FilteredSuggestions)
                    {
                        <li @onclick="() => SelectSuggestion(suggestion, nameof(CurrentTrade.Product.ProductName))">@suggestion</li>
                    }
                </ul>
            }
        }
        else if (CurrentStep == 3)
        {
            <label>Quantity</label>
            <InputNumber @bind-Value="CurrentTrade.Product.Quantity" />
        }
        else if (CurrentStep == 4)
        {
            <label>Protein (%)</label>
            <InputNumber @bind-Value="CurrentTrade.Product.ProductQuality.Protein" />
        }
        else if (CurrentStep == 5)
        {
            <label>Test Weight</label>
            <InputNumber @bind-Value="CurrentTrade.Product.ProductQuality.TestWeight" />
        }
        else if (CurrentStep == 6)
        {
            <label>Falling Number</label>
            <InputNumber @bind-Value="CurrentTrade.Product.ProductQuality.FallingNumber" />
        }
        else if (CurrentStep == 7)
        {
            <label>Glassiness</label>
            <InputNumber @bind-Value="CurrentTrade.Product.ProductQuality.Glassiness" />
        }
        else if (CurrentStep == 8)
        {
            <label>Oil Content</label>
            <InputNumber @bind-Value="CurrentTrade.Product.ProductQuality.OilContent" />
        }
        else if (CurrentStep == 9)
        {
            <label>Damaged Kernels</label>
            <InputNumber @bind-Value="CurrentTrade.Product.ProductQuality.DamagedKernels" />
        }
        else if (CurrentStep == 10)
        {
            <label>DON</label>
            <InputNumber @bind-Value="CurrentTrade.Product.ProductQuality.Don" />
        }
        else if (CurrentStep == 11)
        {
            <label>Aflatoxin</label>
            <InputNumber @bind-Value="CurrentTrade.Product.ProductQuality.Afla" />
        }
        else if (CurrentStep == 12)
        {
            <label>Delivery Parity</label>
            <InputSelect @bind-Value="CurrentTrade.DeliveryInfo.DeliveryParity">
                <option value="">-- Select Parity --</option>
                @foreach (var parity in Enum.GetValues<ParityType>())
                {
                    <option value="@parity">@parity</option>
                }
            </InputSelect>
        }
        else if (CurrentStep == 13)
        {
            <label>Location Detail</label>
            <InputText @bind-Value="CurrentTrade.DeliveryInfo.LocationDetail"
                       placeholder="Type or select location..."
                       @oninput="e => FilterSuggestions(e, nameof(CurrentTrade.DeliveryInfo.LocationDetail))" />

            @if (FilteredSuggestions?.Any() == true && ActiveField == nameof(CurrentTrade.DeliveryInfo.LocationDetail))
            {
                <ul class="suggestions">
                    @foreach (var suggestion in FilteredSuggestions)
                    {
                        <li @onclick="() => SelectSuggestion(suggestion, nameof(CurrentTrade.DeliveryInfo.LocationDetail))">@suggestion</li>
                    }
                </ul>
            }
        }
        else if (CurrentStep == 14)
        {
            <label>Price</label>
            <InputNumber @bind-Value="CurrentTrade.Price" />
        }
        else if (CurrentStep == 15)
        {
            <label>Currency</label>
            <InputText @bind-Value="CurrentTrade.Currency"
                       placeholder="Type or select currency..."
                       @oninput="e => FilterSuggestions(e, nameof(CurrentTrade.Currency))" />

            @if (FilteredSuggestions?.Any() == true && ActiveField == nameof(CurrentTrade.Currency))
            {
                <ul class="suggestions">
                    @foreach (var suggestion in FilteredSuggestions)
                    {
                        <li @onclick="() => SelectSuggestion(suggestion, nameof(CurrentTrade.Currency))">@suggestion</li>
                    }
                </ul>
            }
        }
        else if (CurrentStep == 16)
        {
            <label>GMP</label>
            <InputSelect @bind-Value="CurrentTrade.GMP">
                <option value="">-- Select GMP --</option>
                @foreach (var g in Enum.GetValues<GMP>())
                {
                    <option value="@g">@g</option>
                }
            </InputSelect>
        }
        else if (CurrentStep == 17)
        {
            <label>ISCC</label>
            <InputSelect @bind-Value="CurrentTrade.ISCC">
                <option value="">-- Select ISCC --</option>
                @foreach (var i in Enum.GetValues<ISCC>())
                {
                    <option value="@i">@i</option>
                }
            </InputSelect>
        }
    </div>
}

<div class="wizard-buttons">
    <button @onclick="PrevStep" disabled="@(CurrentStep == 0)">Back</button>
    <button @onclick="NextStep">Next</button>
</div>

@code {
    [Parameter] public int direction { get; set; }

    private int CurrentStep { get; set; }
    private bool IsFinished { get; set; }

    private TradeEntry CurrentTrade { get; set; } = new TradeEntry 
    {   
        Company = new Company(), 
        Product = new Product { ProductQuality = new ProductQuality() }, 
        DeliveryInfo = new DeliveryInfo() 
    };

    // Dynamic suggestions
    private List<string> FilteredSuggestions = new();
    private string ActiveField = "";

    // Frequency-sorted lists
    private List<string> SortedCompanies = new();
    private List<string> SortedContactPersons = new();
    private List<string> SortedProductName = new();
    private List<string> SortedLocationDetail = new();
    private List<string> SortedCurrencies = new();

    protected override async Task OnInitializedAsync()
    {
        var trades = await TradeService.GetAllTradesAsync();

        SortedCompanies = trades
            .Where(t => !string.IsNullOrWhiteSpace(t.Company?.CompanyName))
            .GroupBy(t => t.Company.CompanyName.Trim())
            .OrderByDescending(g => g.Count())
            .Select(g => g.Key)
            .ToList();

        SortedContactPersons = trades
            .Where(t => !string.IsNullOrWhiteSpace(t.Company?.ContactPerson))
            .GroupBy(t => t.Company.ContactPerson.Trim())
            .OrderByDescending(g => g.Count())
            .Select(g => g.Key)
            .ToList();

        SortedProductName = trades
            .Where(t => !string.IsNullOrWhiteSpace(t.Product?.ProductName))
            .GroupBy(t => t.Product.ProductName.Trim())
            .OrderByDescending(g => g.Count())
            .Select(g => g.Key)
            .ToList();

        SortedLocationDetail = trades
            .Where(t => !string.IsNullOrWhiteSpace(t.DeliveryInfo?.LocationDetail))
            .GroupBy(t => t.DeliveryInfo.LocationDetail.Trim())
            .OrderByDescending(g => g.Count())
            .Select(g => g.Key)
            .ToList();

        SortedCurrencies = trades
            .Where(t => !string.IsNullOrWhiteSpace(t.Currency))
            .GroupBy(t => t.Currency.Trim())
            .OrderByDescending(g => g.Count())
            .Select(g => g.Key)
            .ToList();
    }

    private void FilterSuggestions(ChangeEventArgs e, string field)
    {
        var value = e.Value?.ToString() ?? "";
        ActiveField = field;

        var source = field switch
        {
            nameof(CurrentTrade.Company.CompanyName) => SortedCompanies,
            nameof(CurrentTrade.Company.ContactPerson) => SortedContactPersons,
            nameof(CurrentTrade.Product.ProductName) => SortedProductName,
            nameof(CurrentTrade.DeliveryInfo.LocationDetail) => SortedLocationDetail,
            nameof(CurrentTrade.Currency) => SortedCurrencies,
            _ => new List<string>()
        };

        FilteredSuggestions = source
            .Where(s => s.Contains(value, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private void SelectSuggestion(string suggestion, string field)
    {
        switch (field)
        {
            case nameof(CurrentTrade.Company.CompanyName):
                CurrentTrade.Company.CompanyName = suggestion;
                break;
            case nameof(CurrentTrade.Company.ContactPerson):
                CurrentTrade.Company.ContactPerson = suggestion;
                break;
            case nameof(CurrentTrade.Product.ProductName):
                CurrentTrade.Product.ProductName = suggestion;
                break;
            case nameof(CurrentTrade.DeliveryInfo.LocationDetail):
                CurrentTrade.DeliveryInfo.LocationDetail = suggestion;
                break;
            case nameof(CurrentTrade.Currency):
                CurrentTrade.Currency = suggestion;
                break;
        }

        FilteredSuggestions.Clear();
        ActiveField = "";
    }

    private void NextStep()
    {
        if (CurrentStep < StepsCount - 1)
        {
            CurrentStep++;
        }        
        else
        {
            Console.WriteLine("Saving trade: " + System.Text.Json.JsonSerializer.Serialize(CurrentTrade));
            IsFinished = true;
        }
    }

    private void PrevStep()
    {
        if (CurrentStep > 0)
            CurrentStep--;
    }

    private int StepsCount => 18; // adjust if adding/removing steps
}



