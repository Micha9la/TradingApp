@page "/trade-wizard/{direction:int}"

@inject NavigationManager Navigation
@using TradingApp.BlazorUI.Services
@inject ITradeService TradeService


<h3>Create Trade - @direction</h3>

<div class="wizard-step">
    @if (CurrentStep == 0)
    {
        <label>Company Name</label>
        <InputSelect @bind-Value="CurrentTrade.Company.CompanyName">
            <option value="">-- Select Company --</option>
            @foreach (var company in SortedCompanies)
            {
                <option value="@company">@company</option>
            }
        </InputSelect>
    }
    else if (CurrentStep == 1)
    {
        <label>Contact Person</label>
        <InputSelect @bind-Value="CurrentTrade.Company.ContactPerson">
            <option value="">-- Select Contact Person --</option>
            @foreach (var person in SortedContactPersons)
            {
                <option value="@person">@person</option>
            }
        </InputSelect>
    }
    else if (CurrentStep == 2)
    {
        <label>Product Name</label>
        <InputSelect @bind-Value="CurrentTrade.Product.ProductName">
            <option value="">-- Select Product --</option>
            @foreach (var product in SortedProductName)
            {
                <option value="@product">@product</option>
            }
        </InputSelect>
    }
    else if (CurrentStep == 3)
    {
        <label>Quantity</label>
        <InputNumber @bind-Value="CurrentTrade.Product.Quantity" />
    }
    else if (CurrentStep == 4)
    {
        <label>Protein (%)</label>
        <InputNumber @bind-Value="CurrentTrade.Product.ProductQuality.Protein" />
    }
    else if (CurrentStep == 5)
    {
        <label>Test Weight</label>
        <InputNumber @bind-Value="CurrentTrade.Product.ProductQuality.TestWeight" />
    }
    else if (CurrentStep == 6)
    {
        <label>FallingNumber</label>
        <InputNumber @bind-Value="CurrentTrade.Product.ProductQuality.FallingNumber" />
    }
    else if (CurrentStep == 7)
    {
        <label>Glassiness</label>
        <InputNumber @bind-Value="CurrentTrade.Product.ProductQuality.Glassiness" />
    }
    else if (CurrentStep == 8)
    {
        <label>OilContent</label>
        <InputNumber @bind-Value="CurrentTrade.Product.ProductQuality.OilContent" />
    }
    else if (CurrentStep == 9)
    {
        <label>DamagedKernels</label>
        <InputNumber @bind-Value="CurrentTrade.Product.ProductQuality.DamagedKernels" />
    }
    else if (CurrentStep == 10)
    {
        <label>Don</label>
        <InputNumber @bind-Value="CurrentTrade.Product.ProductQuality.Don" />
    }
    else if (CurrentStep == 11)
    {
        <label>Alfa</label>
        <InputNumber @bind-Value="CurrentTrade.Product.ProductQuality.Afla" />
    }
    else if (CurrentStep == 12)
    {
        <label>Delivery Parity</label>
        <InputSelect @bind-Value="CurrentTrade.DeliveryInfo.DeliveryParity">
            <option value="">-- Select Parity --</option>
            @foreach (var parity in SortedDeliveryParities)
            {
                <option value="@parity">@parity</option>
            }
        </InputSelect>
    }
    else if (CurrentStep == 13)
    {
        <label>Location Detail</label>
        <InputSelect @bind-Value="CurrentTrade.DeliveryInfo.LocationDetail">
            <option value="">-- Select Location --</option>
            @foreach (var location in SortedLocationDetail)
            {
                <option value="@location">@location</option>
            }
        </InputSelect>
    }
    else if (CurrentStep == 14)
    {
        <label>Price</label>
        <InputNumber @bind-Value="CurrentTrade.Price" />
    }
    else if (CurrentStep == 15)
    {
        <label>Currency</label>
        <InputSelect @bind-Value="CurrentTrade.Currency">
            <option value="">-- Select Currency --</option>
            @foreach (var currency in SortedCurrencies)
            {
                <option value="@currency">@currency</option>
            }
        </InputSelect>
    }
    else if (CurrentStep == 16)
    {
        <label>GMP</label>
        <InputSelect @bind-Value="CurrentTrade.GMP">
            <option value="">-- Select GMP --</option>
            @foreach (var parity in SortedGMP)
            {
                <option value="@parity">@parity</option>
            }
        </InputSelect>
    }
    else if (CurrentStep == 17)
    {
        <label>ISCC</label>
        <InputSelect @bind-Value="CurrentTrade.ISCC">
            <option value="">-- Select ISCC --</option>
            @foreach (var parity in SortedISCC)
            {
                <option value="@parity">@parity</option>
            }
        </InputSelect>
    }
</div>

<div class="wizard-buttons">
    <button @onclick="PrevStep" disabled="@(CurrentStep == 0)">Back</button>
    <button @onclick="NextStep">Next</button>
</div>

@code {
    [Parameter] public int direction { get; set; }

    private int CurrentStep { get; set; }
    private TradeEntry CurrentTrade { get; set; } = new TradeEntry 
    {   
        Company = new Company(), 
        Product = new Product { ProductQuality = new ProductQuality() }, 
        DeliveryInfo = new DeliveryInfo() 
    };

    // Cast the int → enum every time parameters are set (handles navigation to the same component with different value)
    protected override void OnParametersSet()
    {
        if (Enum.IsDefined(typeof(TradeDirectionType), direction))
        {
            CurrentTrade.TradeDirection = (TradeDirectionType)direction;
        }        
    }

    private List<string> SortedCompanies = new();
    private List<string> SortedContactPersons = new();
    private List<string> SortedProductName = new();
    private List<string> SortedDeliveryParities = new();
    private List<string> SortedLocationDetail = new();
    private List<string> SortedCurrencies = new();
    private List<string> SortedGMP = new();
    private List<string> SortedISCC = new();

    protected override async Task OnInitializedAsync()
    {
        var trades = await TradeService.GetAllTradesAsync();

        SortedCompanies = trades
            .Where(t => !string.IsNullOrWhiteSpace(t.Company?.CompanyName))
            .Select(t => t.Company.CompanyName.Trim())
            .Distinct(StringComparer.OrdinalIgnoreCase)
            .OrderBy(x => x)
            .ToList();

        SortedContactPersons = trades
            .Where(t => !string.IsNullOrWhiteSpace(t.Company?.ContactPerson))
            .Select(t => t.Company.ContactPerson.Trim())
            .Distinct(StringComparer.OrdinalIgnoreCase)
            .OrderBy(x => x)
            .ToList();

        SortedProductName = trades
            .Where(t => !string.IsNullOrWhiteSpace(t.Product?.ProductName))
            .Select(t => t.Product.ProductName.Trim())
            .Distinct(StringComparer.OrdinalIgnoreCase)
            .OrderBy(x => x)
            .ToList();

        SortedDeliveryParities = trades
            .Where(t => t.DeliveryInfo?.DeliveryParity != null)
            .Select(t => t.DeliveryInfo!.DeliveryParity!.ToString())
            .Distinct()
            .OrderBy(x => x)
            .ToList();

        SortedLocationDetail = trades
            .Where(t => !string.IsNullOrWhiteSpace(t.DeliveryInfo?.LocationDetail))
            .Select(t => t.DeliveryInfo.LocationDetail.Trim())
            .Distinct(StringComparer.OrdinalIgnoreCase)
            .OrderBy(x => x)
            .ToList();

        SortedCurrencies = trades
            .Where(t => !string.IsNullOrWhiteSpace(t.Currency))
            .Select(t => t.Currency.Trim())
            .Distinct(StringComparer.OrdinalIgnoreCase)
            .OrderBy(x => x)
            .ToList();

        SortedGMP = trades
            .Where(t => t.GMP != null)          
            .Select(t => t.GMP.ToString())      
            .Distinct()
            .OrderBy(x => x)
            .ToList();

        SortedISCC = trades
            .Where(t => t.GMP != null)
            .Select(t => t.ISCC.ToString())
            .Distinct()
            .OrderBy(x => x)
            .ToList();

    }


    private void NextStep()
    {
        if (CurrentStep < StepsCount - 1)
        {
            CurrentStep++;
        }
        else
        {
            // TODO: Save trade
            Console.WriteLine("Saving trade: " + System.Text.Json.JsonSerializer.Serialize(CurrentTrade));
            Navigation.NavigateTo("/"); // Go back to home after saving
        }
    }

    private void PrevStep()
    {
        if (CurrentStep > 0)
            CurrentStep--;
    }

    private int StepsCount => 20; // number of steps- from company name till notes

    
}

