@page "/trade-wizard/{direction:int}"

@inject NavigationManager Navigation
@using TradingApp.BlazorUI.Services
@using MudBlazor
@inject IDialogService DialogService //usfull if dialog is reused elsewhere.
@inject ITradeService GSTradeService





<h3>Create Trade - @direction</h3>

@if (IsFinished)
{
    <div class="alert alert-success">
        ✅ Trade saved successfully!
    </div>
    <div class="mt-3">
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" Style="background-color: red; color: black;" Size="Size.Small" ´//OnClick="ShowSendDialog">
            Send to Clients
        </MudButton>
        <NavLink class="btn btn-primary" href="/trades">Go to Trades</NavLink>        
         <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   Style="background-color: forestgreen; color: black;"
                   Size="Size.Small"
                   OnClick="StartNewTrade">
            Add Another Trade
        </MudButton>         
    </div>
}
else
{
    <div class="wizard-step">
        @if (CurrentStep == 0)
        {
            <label>Company Name</label>
            <InputText class="form-control" 
                       @bind-Value="CurrentTrade.Company.CompanyName" 
                       list="companyList" />

            <datalist id="companyList">
                @foreach (var company in SortedCompanies)
                {
                    <option value="@company"></option>
                }
            </datalist>

        }
        else if (CurrentStep == 1)
        {
            <label>Contact Person</label>
            <InputText class="form-control" 
                        @bind-Value="CurrentTrade.Company.ContactPerson" 
                        list="contactList" />

            <datalist id="contactList">
                @foreach (var person in SortedContactPerson)
                {
                    <option value="@person"></option>
                }
            </datalist>
        }
        else if (CurrentStep == 2)
        {
            <label>Product Name</label>
            <InputText class="form-control" 
                        @bind-Value="CurrentTrade.Product.ProductName" 
                        list="productList" />

            <datalist id="productList">
                @foreach (var product in SortedProductName)
                {
                    <option value="@product"></option>
                }
            </datalist>
        }
        else if (CurrentStep == 3)
        {
                <label>Quantity (tons)</label>
                <InputNumber TValue="int"
                             class="form-control"
                             @bind-Value="CurrentTrade.Product.Quantity"
                             @oninput="e => FilterSuggestions(e, nameof(CurrentTrade.Product.Quantity))">
                </InputNumber>

            @if (FilteredSuggestions?.Any() == true && ActiveField == nameof(CurrentTrade.Product.Quantity))
            {
                <ul class="suggestions">
                    @foreach (var suggestion in FilteredSuggestions)
                    {
                        <li @onclick="() => SelectSuggestion(suggestion, nameof(CurrentTrade.Product.Quantity))">@suggestion</li>
                    }
                </ul>
            }
        }
        else if (CurrentStep == 4)
        {
            <label>Protein (%)</label>
                <InputNumber
                             class="form-control"
                             @bind-Value="CurrentTrade.Product.ProductQuality.Protein"/>                
        }
        else if (CurrentStep == 5)
        {
            <label>Test Weight</label>
                <InputNumber
                    class="form-control"
                    @bind-Value="CurrentTrade.Product.ProductQuality.TestWeight"/>                
        }
        else if (CurrentStep == 6)
        {
            <label>Falling Number</label>
                <InputNumber
                    class="form-control" 
                    @bind-Value="CurrentTrade.Product.ProductQuality.FallingNumber" />
        }
        else if (CurrentStep == 7)
        {
            <label>Glassiness</label>
                <InputNumber
                             class="form-control"
                             @bind-Value="CurrentTrade.Product.ProductQuality.Glassiness"/>                
        }
        else if (CurrentStep == 8)
        {
            <label>Oil Content</label>
                <InputNumber
                    class="form-control" 
                    @bind-Value="CurrentTrade.Product.ProductQuality.OilContent"/>                
        }
        else if (CurrentStep == 9)
        {
            <label>Damaged Kernels</label>
                <InputNumber
                             class="form-control"
                             @bind-Value="CurrentTrade.Product.ProductQuality.DamagedKernels"/>                
        }
        else if (CurrentStep == 10)
        {
            <label>DON</label>
                <InputNumber
                             class="form-control"
                             @bind-Value="CurrentTrade.Product.ProductQuality.Don"/>                 
        }
        else if (CurrentStep == 11)
        {
            <label>Aflatoxin</label>
                <InputNumber
                             class="form-control"
                             @bind-Value="CurrentTrade.Product.ProductQuality.Afla"/>
        }
        else if (CurrentStep == 12)
        {
            <label>Delivery Parity</label>
            <InputSelect @bind-Value="CurrentTrade.DeliveryInfo.DeliveryParity">
                <option value="">-- Select Parity --</option>
                @foreach (var parity in Enum.GetValues<ParityType>())
                {
                    <option value="@parity">@parity</option>
                }
            </InputSelect>
        }
        else if (CurrentStep == 13)
        {
            <label>Location Detail</label>
            <InputText @bind-Value="CurrentTrade.DeliveryInfo.LocationDetail"
                       placeholder="Type or select location..."
                       @oninput="e => FilterSuggestions(e, nameof(CurrentTrade.DeliveryInfo.LocationDetail))" />

            @if (FilteredSuggestions?.Any() == true && ActiveField == nameof(CurrentTrade.DeliveryInfo.LocationDetail))
            {
                <ul class="suggestions">
                    @foreach (var suggestion in FilteredSuggestions)
                    {
                        <li @onclick="() => SelectSuggestion(suggestion, nameof(CurrentTrade.DeliveryInfo.LocationDetail))">@suggestion</li>
                    }
                </ul>
            }
        }
        else if (CurrentStep == 14)
        {
            <label>Price</label>
            <InputNumber TValue="decimal" 
                        class="form-control"
                        @bind-Value="CurrentTrade.Price"/>
        }
        else if (CurrentStep == 15)
        {
            <label>Currency</label>
            <InputText @bind-Value="CurrentTrade.Currency"
                       placeholder="Type or select currency..."
                       @oninput="e => FilterSuggestions(e, nameof(CurrentTrade.Currency))" />

            @if (FilteredSuggestions?.Any() == true && ActiveField == nameof(CurrentTrade.Currency))
            {
                <ul class="suggestions">
                    @foreach (var suggestion in FilteredSuggestions)
                    {
                        <li @onclick="() => SelectSuggestion(suggestion, nameof(CurrentTrade.Currency))">@suggestion</li>
                    }
                </ul>
            }
        }
        else if (CurrentStep == 16)
        {
            <label>GMP</label>
            <InputSelect @bind-Value="CurrentTrade.GMP">
                <option value="">-- Select GMP --</option>
                @foreach (var g in Enum.GetValues<GMP>())
                {
                    <option value="@g">@g</option>
                }
            </InputSelect>
        }
        else if (CurrentStep == 17)
        {
            <label>ISCC</label>
            <InputSelect @bind-Value="CurrentTrade.ISCC">
                <option value="">-- Select ISCC --</option>
                @foreach (var i in Enum.GetValues<ISCC>())
                {
                    <option value="@i">@i</option>
                }
            </InputSelect>
        }
        else if (CurrentStep == 18)
        {
            <label>Records Public</label>
            <InputText class="form-control" @bind-Value="CurrentTrade.Records" />
        }
        else if (CurrentStep == 19)
        {
            <label>Private Notes</label>
            <InputTextArea class="form-control" @bind-Value="CurrentTrade.PrivateNotes" />
        }

   </div>
}

<div class="wizard-buttons">
    @if (!IsFinished)
    {
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   Size="Size.Small"
                   Disabled="@(CurrentStep == 0)"
                   OnClick="PrevStep">
            Back
        </MudButton>

        @if (CurrentStep < StepsCount - 1)
        {
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Small"
                       OnClick="NextStep">
                Next
            </MudButton>
        }
        else
        {
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Small"
                       OnClick="FinishWizard">
                Finish
            </MudButton>
        }
    }    
</div>




@code {
    [Parameter] public int direction { get; set; }


private string GenerateTradeSummary(TradeEntry trade)
{
    return $@"
Trade Summary:
Date: {trade.Date:yyyy-MM-dd}
Company: {trade.Company?.CompanyName}
Contact: {trade.Company?.ContactPerson}
Product: {trade.Product?.ProductName}
Quantity: {trade.Product?.Quantity} tons
Price: {trade.Price} {trade.Currency}
Delivery: {trade.DeliveryInfo?.DeliveryParity} - {trade.DeliveryInfo?.LocationDetail}
Notes: {trade.Records}

(Generated automatically from Trade Wizard)
";
}


    protected override async Task OnParametersSetAsync()
{
    // Keep existing initialization work if you have any - set the trade direction early.
    // Map the int 'direction' to your enum safely.
    if (Enum.IsDefined(typeof(TradeDirectionType), direction))
    {
        CurrentTrade.TradeDirection = (TradeDirectionType)direction;
    }
    else
    {
        // fallback to Offer if the param is out of range
        CurrentTrade.TradeDirection = TradeDirectionType.Offer;
    }

    // Optional: set a readable title or debug
    Console.WriteLine($"Trade wizard opened with direction param = {direction} -> {CurrentTrade.TradeDirection}");

    await base.OnParametersSetAsync();
}

    private int CurrentStep { get; set; }
    private bool IsFinished { get; set; }

    private TradeEntry CurrentTrade { get; set; } = new TradeEntry 
    { 
        Company = new Company(), 
        Product = new Product { ProductQuality = new ProductQuality() }, 
        DeliveryInfo = new DeliveryInfo() 
    };

    private int StepsCount => 20; // adjust if adding/removing steps

    // Dynamic suggestions
    private List<string> FilteredSuggestions = new();
    private string ActiveField = "";

    // Frequency-sorted lists
    private List<string> SortedCompanies = new();
    private List<string> SortedContactPerson = new();
    private List<string> SortedProductName = new();
    private List<string> SortedQuantities = new();
    private List<string> SortedLocationDetail = new();
    private List<string> SortedCurrencies = new();
   
    

    private Task<IEnumerable<string>> SearchSuggestionsAsync(IEnumerable<string> source, string searchText)
    {
        if (string.IsNullOrWhiteSpace(searchText))
            return Task.FromResult(source);

        return Task.FromResult(
        source.Where(s => s.Contains(searchText, StringComparison.OrdinalIgnoreCase))
              .AsEnumerable()
    );
    }



    //Information can be entered through the UI or via Excel, it ends up in SortedX because both come from trades.
    protected override async Task OnInitializedAsync() 
    {
        var trades = await GSTradeService.GetAllTradesAsync();

        SortedCompanies = trades 
        .Where(t => !string.IsNullOrWhiteSpace(t.Company?.CompanyName)) 
        .GroupBy(t => t.Company.CompanyName.Trim()) 
        .OrderByDescending(g => g.Count()) 
        .Select(g => g.Key) 
        .ToList(); 
        
        SortedContactPerson = trades 
        .Where(t => !string.IsNullOrWhiteSpace(t.Company?.ContactPerson)) 
        .GroupBy(t => t.Company.ContactPerson.Trim()) 
        .OrderByDescending(g => g.Count()) 
        .Select(g => g.Key) .ToList(); 
        
        SortedProductName = trades 
        .Where(t => !string.IsNullOrWhiteSpace(t.Product?.ProductName)) 
        .GroupBy(t => t.Product.ProductName.Trim()) 
        .OrderByDescending(g => g.Count()) 
        .Select(g => g.Key) 
        .ToList(); 
        
        SortedQuantities = trades
        .Where(t => t.Product?.Quantity > 0)   // only positive quantities
        .GroupBy(t => t.Product.Quantity)
        .OrderByDescending(g => g.Count())
        .Select(g => g.Key.ToString())         // store as string for suggestions
        .ToList();

        SortedLocationDetail = trades 
        .Where(t => !string.IsNullOrWhiteSpace(t.DeliveryInfo?.LocationDetail)) 
        .GroupBy(t => t.DeliveryInfo.LocationDetail.Trim()) 
        .OrderByDescending(g => g.Count()) 
        .Select(g => g.Key) 
        .ToList(); 
        
        SortedCurrencies = trades 
        .Where(t => !string.IsNullOrWhiteSpace(t.Currency)) 
        .GroupBy(t => t.Currency.Trim()) 
        .OrderByDescending(g => g.Count()) 
        .Select(g => g.Key) 
        .ToList(); 
    }

    private void FilterSuggestions(ChangeEventArgs e, string field)
    {
        var value = e.Value?.ToString() ?? "";
        ActiveField = field;

        var source = field switch
        {
            nameof(CurrentTrade.Company.CompanyName) => SortedCompanies,
            nameof(CurrentTrade.Company.ContactPerson) => SortedContactPerson,
            nameof(CurrentTrade.Product.ProductName) => SortedProductName,
            nameof(CurrentTrade.Product.Quantity) => SortedQuantities,
            nameof(CurrentTrade.DeliveryInfo.LocationDetail) => SortedLocationDetail,
            nameof(CurrentTrade.Currency) => SortedCurrencies,
            _ => new List<string>()
        };

        FilteredSuggestions = source
            .Where(s => s.Contains(value, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private void SelectSuggestion(string suggestion, string field)
    {
        switch (field)
        {
            case nameof(CurrentTrade.Company.CompanyName):
                CurrentTrade.Company.CompanyName = suggestion;
                break;
            case nameof(CurrentTrade.Company.ContactPerson):
                CurrentTrade.Company.ContactPerson = suggestion;
                break;
            case nameof(CurrentTrade.Product.ProductName):
                CurrentTrade.Product.ProductName = suggestion;
                break;
            case nameof(CurrentTrade.Product.Quantity):
                if (int.TryParse(suggestion, out var qty))
                {
                    CurrentTrade.Product.Quantity = qty;
                }
                break; //user will see past quantities as suggestions while typing.
            case nameof(CurrentTrade.DeliveryInfo.LocationDetail):
                CurrentTrade.DeliveryInfo.LocationDetail = suggestion;
                break;
            case nameof(CurrentTrade.Currency):
                CurrentTrade.Currency = suggestion;
                break;
        }

        FilteredSuggestions.Clear();
        ActiveField = "";
    }

    private async void NextStep()
{
    if (CurrentStep < StepsCount - 1)
    {
        CurrentStep++;
    }
    else
    {
        // Only finish, don't save here
        await FinishWizard();
    }
}

    private void PrevStep()
    {
        if (CurrentStep > 0)
            CurrentStep--;
    }

    private async Task FinishWizard()
    {        
        //unique, sequential CatalogNumber from the sheet itself
        CurrentTrade.CatalogNumber = await GSTradeService.GetNextCatalogNumberAsync();
        CurrentTrade.Date = DateTime.UtcNow; // assign save date

        Console.WriteLine($"Saving trade — Catalog: {CurrentTrade.CatalogNumber}, Direction: {CurrentTrade.TradeDirection}");

        // Save to Google Sheets
        await GSTradeService.AppendTradeAsync(CurrentTrade);

        //Console.WriteLine("Saving trade: " + System.Text.Json.JsonSerializer.Serialize(CurrentTrade));

        IsFinished = true; //show success screen
    }
    
    private void StartNewTrade()
{
    Navigation.NavigateTo("/landingpage");
}
}




