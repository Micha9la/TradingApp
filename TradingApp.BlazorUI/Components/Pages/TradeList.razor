@page "/trades"
@using TradingApp.BlazorUI.Services
@inject ITradeService TradeService
@inject CsvTradeImporter Importer
@inject IWebHostEnvironment Env
@inject GoogleSheetTradeSyncService GoogleSheetService



<h3>Imported Trades</h3>

@if (trades == null)
{
    <p>Loading...</p>
}
else if (!trades.Any())
{
    <p>No trades found.</p>
}
else
{
    <QuickGrid TGridItem="TradeEntry" Items="trades">
        <PropertyColumn Property="@(t => t.CatalogNumber)" Title="Catalog #" />
        <PropertyColumn Property="@(t => t.Date)" Title="Date" Format="d" />
        <PropertyColumn Property="@(t => t.TradeDirection)" Title="Direction" />

        <PropertyColumn Property="@(t => t.Company.CompanyName)" Title="Company" />
        <PropertyColumn Property="@(t => t.Company.ContactPerson)" Title="Contact" />

        <PropertyColumn Property="@(t => t.Product.ProductName)" Title="Product" />
        <PropertyColumn Property="@(t => t.Product.Quantity)" Title="Quantity (t)" />

        <PropertyColumn Property="@(t => t.Product.ProductQuality.Protein)" Title="Protein" />
        <PropertyColumn Property="@(t => t.Product.ProductQuality.TestWeight)" Title="Test Weight" />
        <PropertyColumn Property="@(t => t.Product.ProductQuality.FallingNumber)" Title="Falling Number" />
        <PropertyColumn Property="@(t => t.Product.ProductQuality.Glassiness)" Title="Glassiness" />
        <PropertyColumn Property="@(t => t.Product.ProductQuality.OilContent)" Title="Oil Content" />
        <PropertyColumn Property="@(t => t.Product.ProductQuality.DamagedKernels)" Title="Damaged Kernels" />
        <PropertyColumn Property="@(t => t.Product.ProductQuality.Don)" Title="Don" />
        <PropertyColumn Property="@(t => t.Product.ProductQuality.Afla)" Title="Afla" />

        <PropertyColumn Property="@(t => t.DeliveryInfo.DeliveryParity)" Title="Parity" />
        <PropertyColumn Property="@(t => t.DeliveryInfo.LocationDetail)" Title="Location" />

        <PropertyColumn Property="@(t => t.Price)" Title="Price" Format="0.00" />
        <PropertyColumn Property="@(t => t.Currency)" Title="Currency" />

        <PropertyColumn Property="@(t => t.GMP)" Title="GMP" />
        <PropertyColumn Property="@(t => t.ISCC)" Title="ISCC" />

        <PropertyColumn Property="@(t => t.Records)" Title="Records" />
        <PropertyColumn Property="@(t => t.PrivateNotes)" Title="Private Notes" />
    </QuickGrid>
}


<button @onclick="AppendTestTrade">Add Test Trade</button>

@code {
    
    //private List<TradeEntry> trades;

    //protected override async Task OnInitializedAsync() //Runs when the page is loaded — this is where data is fetched
    //{
     //   var csvPath = Path.Combine(Env.WebRootPath, "TradeData.csv");
     //   await Importer.ImportTradesFromCsv(csvPath);
     //   trades = await TradeService.GetAllTradesAsync(); //Calls EF-based data service to load data from the database.
    //}

    //Add a List<TradeEntry> to display trades
    private List<TradeEntry> trades = new();
    //Load data from Google Sheets on page load
    protected override async Task OnInitializedAsync()
    {
        trades = await GoogleSheetService.ReadTradesAsync();
    }

    private async Task AppendTestTrade()
    {
        var testTrade = new TradeEntry
        {
            CatalogNumber = 999,
            Date = DateTime.Now,
            TradeDirection = TradeDirectionType.Offer,
            Product = new Product
            {
                ProductName = "Test Product",
                Quantity = 100,
                ProductQuality = new ProductQuality
                {
                    Protein = 13.5f,
                    TestWeight = 78,
                    FallingNumber = 300,
                    Glassiness = 0,
                    OilContent = 0,
                    DamagedKernels = 0,
                    Don = 0,
                    Afla = 0
                }
            },
            Company = new Company
            {
                CompanyName = "Test Co",
                ContactPerson = "Test Person"
            },
            DeliveryInfo = new DeliveryInfo
            {
                DeliveryParity = ParityType.FCA,
                LocationDetail = "Test Location"
            },
            Price = 250,
            Currency = "EUR",
            GMP = GMP.NonGMP,
            ISCC = ISCC.NonISCC,
            Records = "Test record",
            PrivateNotes = "Some notes"
        };

        await GoogleSheetService.AppendTradeAsync(testTrade);

        // Optionally reload data
        trades = await GoogleSheetService.ReadTradesAsync();
    }
}

