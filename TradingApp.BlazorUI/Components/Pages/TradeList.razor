@page "/trades"
@using TradingApp.BlazorUI.Services
@inject ITradeService TradeService
@inject CsvTradeImporter Importer
@inject IWebHostEnvironment Env
@inject ITradeService GoogleSheetService
@using TradingApp
@using TradingApp.BlazorUI.Data

<h3>Imported Trades</h3>
<div class="d-flex flex-column align-items-center gap-3 mt-4">
    <NavLink class="btn btn-primary" href="/landingpage">Enter Trade</NavLink>
</div>

@if (trades == null)
{
    <p>Loading...</p>
}
else if (!trades.Any())
{
    <p>No trades found.</p>
    <p>Total Trades: @trades?.Count</p>

}
else
{    
    <QuickGrid TGridItem="TradeEntry" Items="trades.AsQueryable()">
    <PropertyColumn Property="@(t => t.CatalogNumber)" Title="Catalog #" />
    <PropertyColumn Property="@(t => t.Date)" Title="Date" Format="d" />
    <PropertyColumn Property="@(t => t.TradeDirection)" Title="Direction" />

        <TemplateColumn Title="Company">
            @context.Company.CompanyName.ValueOrEmpty()
        </TemplateColumn>
        <TemplateColumn Title="ContactPerson">
            @context.Company.ContactPerson.ValueOrEmpty()
        </TemplateColumn>

        <TemplateColumn Title="ProductName">
            @context.Product.ProductName.ValueOrEmpty()
        </TemplateColumn>
        <TemplateColumn Title="Quantity">
            @context.Product.Quantity.ValueOrEmpty()
        </TemplateColumn>
        <TemplateColumn Title="Protein">
            @context.Product.ProductQuality.Protein.ValueOrEmpty()
        </TemplateColumn>

        <TemplateColumn Title="TestWeight">
            @context.Product.ProductQuality.TestWeight.ValueOrEmpty()
        </TemplateColumn>
        <TemplateColumn Title="FallingNumber">
            @context.Product.ProductQuality.FallingNumber.ValueOrEmpty()
        </TemplateColumn>
        <TemplateColumn Title="Glassiness">
            @context.Product.ProductQuality.Glassiness.ValueOrEmpty()
        </TemplateColumn>
        <TemplateColumn Title="OilContent">
            @context.Product.ProductQuality.OilContent.ValueOrEmpty()
        </TemplateColumn>
        <TemplateColumn Title="DamagedKernels">
            @context.Product.ProductQuality.DamagedKernels.ValueOrEmpty()
        </TemplateColumn>

        <TemplateColumn Title="Don">
            @context.Product.ProductQuality.Don.ValueOrEmpty()
        </TemplateColumn>
        <TemplateColumn Title="Afla">
            @context.Product.ProductQuality.Afla.ValueOrEmpty()
        </TemplateColumn>

        <TemplateColumn Title="DeliveryParity">
            @context.DeliveryInfo.DeliveryParity.ValueOrEmpty()
        </TemplateColumn>
        <TemplateColumn Title="LocationDetails">
            @context.DeliveryInfo.LocationDetail.ValueOrEmpty()
        </TemplateColumn>

        <TemplateColumn Title="Price">
            @context.Price.ValueOrEmpty()
        </TemplateColumn>
        <TemplateColumn Title="Currency">
            @context.Currency.ValueOrEmpty()
        </TemplateColumn>
        <TemplateColumn Title="GMP">
            @context.GMP.ValueOrEmpty()
        </TemplateColumn>
        <TemplateColumn Title="ISCC">
            @context.ISCC.ValueOrEmpty()
        </TemplateColumn>

        <TemplateColumn Title="Records">
            @context.Records.ValueOrEmpty()
        </TemplateColumn>
        <TemplateColumn Title="PrivateNotes">
            @context.PrivateNotes.ValueOrEmpty()
        </TemplateColumn>
    </QuickGrid>

}

<button @onclick="AppendTestTrade">Add Test Trade</button>

<p>Total Trades: @trades?.Count</p>

<button @onclick="TestGoogleSheetRead">Test Read</button>

@code {
    private async Task TestGoogleSheetRead()
    {
        trades = await GoogleSheetService.GetAllTradesAsync();

        Console.WriteLine($"TestRead: Found {trades?.Count ?? 0} trades");
        await InvokeAsync(StateHasChanged);
    }
}

@code {
    private List<TradeEntry> trades = new();

    protected override async Task OnInitializedAsync()
    {
        trades = await GoogleSheetService.GetAllTradesAsync();
        Console.WriteLine($"Loaded {trades.Count} trades from Google Sheets"); //logging
    }

    private async Task AppendTestTrade()
    {
        var testTrade = new TradeEntry
        {
            CatalogNumber = 999,
            Date = DateTime.Now,
            TradeDirection = TradeDirectionType.Offer,
            Product = new Product
            {
                ProductName = "Test Product",
                Quantity = 100,
                ProductQuality = new ProductQuality
                {
                    Protein = 13.5f,
                    TestWeight = 78,
                    FallingNumber = 300,
                    Glassiness = 0,
                    OilContent = 0,
                    DamagedKernels = 0,
                    Don = 0,
                    Afla = 0
                }
            },
            Company = new Company
            {
                CompanyName = "Test Co",
                ContactPerson = "Test Person"
            },
            DeliveryInfo = new DeliveryInfo
            {
                DeliveryParity = ParityType.FCA,
                LocationDetail = "Test Location"
            },
            Price = 250,
            Currency = "EUR",
            GMP = GMP.NonGMP,
            ISCC = ISCC.NonISCC,
            Records = "Test record",
            PrivateNotes = "Some notes"
        };

        await GoogleSheetService.AppendTradeAsync(testTrade);
        trades = await GoogleSheetService.GetAllTradesAsync();
    }
}


