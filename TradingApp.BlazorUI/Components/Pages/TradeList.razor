@page "/trades"
@using TradingApp.BlazorUI.Services
@inject ITradeService TradeService
@inject CsvTradeImporter Importer
@inject IWebHostEnvironment Env
@inject GoogleSheetTradeSyncService GoogleSheetService

<h3>Imported Trades</h3>

@if (trades == null)
{
    <p>Loading...</p>
}
else if (!trades.Any())
{
    <p>No trades found.</p>
}
else
{
    <QuickGrid TGridItem="TradeEntry" Items="trades.AsQueryable()">
    <PropertyColumn Property="@(t => t.CatalogNumber)" Title="Catalog #" />
    <PropertyColumn Property="@(t => t.Date)" Title="Date" Format="d" />
    <PropertyColumn Property="@(t => t.TradeDirection)" Title="Direction" />

    <TemplateColumn Title="Company">
        <Template Context="t">@t.Company?.CompanyName ?? ""</Template>
    </TemplateColumn>
    <TemplateColumn Title="Contact">
        <Template Context="t">@t.Company?.ContactPerson ?? ""</Template>
    </TemplateColumn>

    <TemplateColumn Title="Product Name">
        <Template Context="t">@t.Product?.ProductName ?? ""</Template>
    </TemplateColumn>
    <TemplateColumn Title="Quantity">
        <Template Context="t">@t.Product?.Quantity.ToString("0.##") ?? ""</Template>
    </TemplateColumn>

    <TemplateColumn Title="Protein (%)">
        <Template Context="t">@t.Product?.ProductQuality?.Protein.ToString("0.##") ?? ""</Template>
    </TemplateColumn>
    <TemplateColumn Title="Test Weight">
        <Template Context="t">@t.Product?.ProductQuality?.TestWeight.ToString() ?? ""</Template>
    </TemplateColumn>
    <TemplateColumn Title="Falling #">
        <Template Context="t">@t.Product?.ProductQuality?.FallingNumber.ToString() ?? ""</Template>
    </TemplateColumn>
    <TemplateColumn Title="Glassiness">
        <Template Context="t">@t.Product?.ProductQuality?.Glassiness.ToString() ?? ""</Template>
    </TemplateColumn>
    <TemplateColumn Title="Oil Content">
        <Template Context="t">@t.Product?.ProductQuality?.OilContent.ToString() ?? ""</Template>
    </TemplateColumn>
    <TemplateColumn Title="Damaged Kernels">
        <Template Context="t">@t.Product?.ProductQuality?.DamagedKernels.ToString() ?? ""</Template>
    </TemplateColumn>
    <TemplateColumn Title="DON">
        <Template Context="t">@t.Product?.ProductQuality?.Don.ToString() ?? ""</Template>
    </TemplateColumn>
    <TemplateColumn Title="AFLA">
        <Template Context="t">@t.Product?.ProductQuality?.Afla.ToString() ?? ""</Template>
    </TemplateColumn>

    <TemplateColumn Title="Delivery Parity">
        <Template Context="t">@t.DeliveryInfo?.DeliveryParity.ToString() ?? ""</Template>
    </TemplateColumn>
    <TemplateColumn Title="Location">
        <Template Context="t">@t.DeliveryInfo?.LocationDetail ?? ""</Template>
    </TemplateColumn>

    <TemplateColumn Title="Price">
        <Template Context="t">@t.Price.ToString("0.00")</Template>
    </TemplateColumn>
    <TemplateColumn Title="Currency">
        <Template Context="t">@t.Currency ?? ""</Template>
    </TemplateColumn>

    <TemplateColumn Title="GMP">
        <Template Context="t">@t.GMP.ToString() ?? ""</Template>
    </TemplateColumn>
    <TemplateColumn Title="ISCC">
        <Template Context="t">@t.ISCC.ToString() ?? ""</Template>
    </TemplateColumn>

    <TemplateColumn Title="Records">
        <Template Context="t">@t.Records ?? ""</Template>
    </TemplateColumn>
    <TemplateColumn Title="Private Notes">
        <Template Context="t">@t.PrivateNotes ?? ""</Template>
    </TemplateColumn>
</QuickGrid>

}

<button @onclick="AppendTestTrade">Add Test Trade</button>

@code {
    private List<TradeEntry> trades = new();

    protected override async Task OnInitializedAsync()
    {
        trades = await GoogleSheetService.ReadTradesAsync();
    }

    private async Task AppendTestTrade()
    {
        var testTrade = new TradeEntry
        {
            CatalogNumber = 999,
            Date = DateTime.Now,
            TradeDirection = TradeDirectionType.Offer,
            Product = new Product
            {
                ProductName = "Test Product",
                Quantity = 100,
                ProductQuality = new ProductQuality
                {
                    Protein = 13.5f,
                    TestWeight = 78,
                    FallingNumber = 300,
                    Glassiness = 0,
                    OilContent = 0,
                    DamagedKernels = 0,
                    Don = 0,
                    Afla = 0
                }
            },
            Company = new Company
            {
                CompanyName = "Test Co",
                ContactPerson = "Test Person"
            },
            DeliveryInfo = new DeliveryInfo
            {
                DeliveryParity = ParityType.FCA,
                LocationDetail = "Test Location"
            },
            Price = 250,
            Currency = "EUR",
            GMP = GMP.NonGMP,
            ISCC = ISCC.NonISCC,
            Records = "Test record",
            PrivateNotes = "Some notes"
        };

        await GoogleSheetService.AppendTradeAsync(testTrade);
        trades = await GoogleSheetService.ReadTradesAsync();
    }
}


